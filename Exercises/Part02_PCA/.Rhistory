for(i in 1:1000){
d <- dat
d$type <- sample(d$type)
tst_h0[i] <- diff(tapply(d$y, d$type, mean))
}
tst_h0
niceUnivPlot(tst_h0)
### Look at results:
hist(tst_h0)
### Look at results:
hist(tst_h0)
abline(v = tst_o, col='red', lwd=2)
?wilcox.test
library(CustomFunctionsYrotha)
setUpGraph()
N <- 13
a <- sample(1:3, replace = TRUE, size = N, prob = c(0.5, 0.4, 0.1))
b <- sample(1:3, replace = TRUE, size = N, prob = c(0.1, 0.4, 0.5))
N <- 13
# a <- sample(1:4, replace = TRUE, size = N, prob = c(0.5, 0.4, 0.1))
# b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.4, 0.5))
a <- sample(1:4, replace = TRUE, size = N)
b <- sample(1:4, replace = TRUE, size = N)
a
b
aa <- data.frame(type='a', y=a)
bb <- data.frame(type='b', y=b)
dat <- rbind(aa,bb)
dat
dat
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
a
b
aa <- data.frame(type='a', y=a)
bb <- data.frame(type='b', y=b)
dat <- rbind(aa,bb)
dat
niceUnivPlot(dat$y, catVar = factro(dat$type))
niceUnivPlot(dat$y, catVar = factor(dat$type))
### Calculate original test statistic:
tst_o <- abs(diff(tapply(dat$y, dat$type, mean)))
tst_o
### Simulate H0:
tst_h0 <- NA
dat
d <- dat
d$type
sample(d$type)
d$type <- sample(d$type)
tst_h0[i] <- abs(diff(tapply(d$y, d$type, mean)))
### Simulate H0:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
d$type <- sample(d$type)
tst_h0[i] <- abs(diff(tapply(d$y, d$type, mean)))
}
tst_h0
### Look at results:
hist(tst_h0)
abline(v = tst_o, col='red', lwd=2)
### Empirical pvalue:
mean(tst_h0 > tst_o)
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
a
b
a
b
### Paired:
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat
dat
dat$diff <- dat$pre - dat$post
dat
### Original test statistic:
mean(dat$diff)
### Original test statistic:
t_or <- mean(dat$diff)
t_or
### Paired:
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
dat
### Original test statistic:
t_or <- mean(dat$diff)
t_or
### Permutation:
tst_h0 <- NA
sample(c(1, -1), replace = TRUE)
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
sample(c(1, -1), replace = TRUE, size=nrow(dat))
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
abs(d$diff)
abs(d$diff) * rand_sign
abs(d$diff) * rand_sign
abs(d$diff) * rand_sign
abs(d$diff) * rand_sign
abs(d$diff) * rand_sign
DAT
dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
abs(d$diff) * rand_sign
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
abs(d$diff) * rand_sign
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
abs(d$diff) * rand_sign
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
d
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
d
tst_h0[i] <- mean(d$diff)
tst_h0
i
### Permutation:
tst_h0 <- NA
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
i <- 1
itst_h0[i] <- mean(d$diff)
tst_h0[i] <- mean(d$diff)
tst_h0
### Paired:
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
tst_h0
t_or
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
tst_h0 > t_or
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:10000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
### Paired:
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:100000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val:
mean(tst_h0 > t_or)
N <- 13
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
### Original test statistic:
t_or <- mean(dat$diff)
### Permutation:
tst_h0 <- NA
for(i in 1:100000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
rm(list=ls())
### Paired:
N <- 13   # Sampsize
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
### Generate artificial paired data:
N <- 13   # Sampsize
a <- sample(1:4, replace = TRUE, size = N, prob = c(0.4, 0.4, 0.1, 0.1))
b <- sample(1:4, replace = TRUE, size = N, prob = c(0.1, 0.2, 0.4, 0.4))
dat <- data.frame(id=paste0('S', 1:length(a)), pre=a, post=b)
dat$diff <- dat$post - dat$pre
dat
### Original test statistic:
t_or <- mean(dat$diff)
t_or
t_or
### Permutation scheme:
tst_h0 <- NA
for(i in 1:100000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
rand_sign
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
rand_sign
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
dat
dat
dat
d
### Permutation scheme:
tst_h0 <- NA
for(i in 1:100000){
d <- dat
rand_sign <- sample(c(1, -1), replace = TRUE, size=nrow(dat))
d$diff <- abs(d$diff) * rand_sign
tst_h0[i] <- mean(d$diff)
}
### Plot:
hist(tst_h0)
abline(v=t_or, col='red', lwd=2)
### P-val (one sided):
mean(tst_h0 > t_or)
### Empirical p-value (one sided):
mean(tst_h0 > t_or)
1+1
3*3
1+1
2*2
2/2
a <- 3
a + 1
bbbb <- 20
bbbb + a
x <- seq(from=1, to=10, length.out=100)
x
y <- 0
dat <- data.frame(x, y)
dat
dat$y[dat$x>5] <- 1
dat
library(CustomFunctionsYrotha)
setUpGraph()
plot(y ~x, dat)
log_fit <- glm(y ~x, dat, family='binomial')
log_fit
dat
plot(y ~x, dat)
summary(log_fit)
a <- rnorm(1000, sd=0.00001)
b <- rnorm(1000, sd=10)
hist(c(a,b))
qqplot(c(a,b))
qqnorm(c(a,b))
library(CustomFunctionsYrotha)
dat <- mmdgp()
head(dat)
str(dat)
library(lmerTest)
lmer(y ~ age + (age|id), data=dat)
dat <- mmdgp(n = 100, nC = 1)
lmer(y ~ age + (age|id), data=dat)
lmer(y ~ age + (1|id), data=dat)
lmer(y ~ age + (age|id), data=dat)
lmer(y ~ (age|id), data=dat)
lmer(y ~ age + (age|id), data=dat)
dat <- mmdgp(n = 100, nC = 1)
lmer(y ~ age + (age|id), data=dat)
lmer(y ~ age + (1|id), data=dat)
str(dat)
head(dat)
lmer(y ~ day + (day|id), data=dat)
str(dat)
dat$day <- as.numeric(dat$day)
lmer(y ~ day + (day|id), data=dat)
lmer(y ~  (day|id), data=dat)
lmer(y ~  day + (day|id), data=dat)
head(dat)
str(dat)
lmer(y ~  day + (day|id), data=dat)
lmer(y ~  day + (1+day|id), data=dat)
lmer(y ~ 1+  day + (1+day|id), data=dat)
?hclust
library(cluster)
1+1
2*3
1+100
1+100
3*3
a <- 33
a*100
vec1 <- c(20, 122, 39)
vec1
setwd("/home/yrothacher/Desktop/PostDoc_Unterlagen/Arbeit/Workshops/myWorkshops/Blockkurs_IntroToMachineLearning_FS23/Exercises/IMLR_Part02_PCA/")
library(CustomFunctionsYrotha)
setUpGraph()
load('./breastCancer_Wisconsin.rda')
ls()
head(wisco)
nicePairsPlot(wisco)
str(wisco)
grepl('_se', colnames(wisco))
!grepl('_se', colnames(wisco))
dat <- wisco[!grepl('_se', colnames(wisco)), ]
str(dat)
dat <- wisco[, !grepl('_se', colnames(wisco))]
str(dat)
dat <- dat[, !grepl('_worst', colnames(dat))]
str(dat)
dat$diagnosis <- factor(dat$diagnosis)
nicePairsPlot(dat)
nicePairsPlot(dat, cex.diag = 0.7)
nicePairsPlot(dat, cex.diag = 0.8)
nicePairsPlot(dat, cex.diag = 0.9)
nicePairsPlot(dat, cex.diag = 1.3)
nicePairsPlot(dat, cex.diag = 1.3, exclude = c('id'))
nicePairsPlot(dat, cex.diag = 1.3, exclude = c('id'), cex.offdiag = 0.8)
nicePairsPlot(dat, cex.diag = 1.3, exclude = c('id'), cex.offdiag = 0.5)
nicePairsPlot(dat, cex.diag = 1.3, exclude = c('id'),
cex.offdiag = 0.5, catVar = dat$diagnosis)
nicePairsPlot(dat[, c("radius_mean", "perimeter_mean")])
nicePairsPlot(dat, cex.diag = 1.3, exclude = c('id'),
cex.offdiag = 0.5, catVar = dat$diagnosis)
wisco$id
wisco$diagnosis
