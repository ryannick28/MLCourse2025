setwd("/home/yrothacher/Desktop/PostDoc_Unterlagen/Arbeit/Workshops/myWorkshops/Swiss_Psychological_Society_2022/Machine_Learning_Workshop/myMaterial/Exercises/KNN/")
ls()
d <- load('./Covid_stress_data_subs.rdata')
ls()
d
rm(d)
ls
ls()
head(dat_cvid)
str(dat_cvid)
library(CustomFunctionsYrotha)
setUpGraph()
niceNaPlot(dat_cvid)
nicePairsPlot(dat_cvid)
nicePairsPlot(dat_cvid, txtInc = 0.7)
nicePairsPlot(dat_cvid, txtInc = 0.5)
nicePairsPlot(dat_cvid, txtInc = 0.5, catVar = dat_cvid$vaccWill)
nicePairsPlot(dat_cvid, txtInc = 0.5, exclude = 'numeric')
nicePairsPlot(dat_cvid, txtInc = 0.5, catVar = dat_cvid$vaccWill)
nicePairsPlot(dat_cvid, txtInc = 0.5, catVar = dat_cvid$vaccWill, loess = TRUE)
rm(list=ls())
#install.packages("MASS")
library(MASS)
head(crabs)
colnames(crabs[, -c(1:3)])
#install.packages("MASS")
library(MASS)
head(crabs)
dim(crabs)
str(crabs)
summary(crabs)
nicePairsPlot(crabs)
nicePairsPlot(crabs, exclude = 'index')
library(GGally)
library(ggplot2)
ggpairs(crabs[,-1])
head(crabs)
ggpairs(crabs[,-3])
nicePairsPlot(crabs, exclude = 'index')
morph <- crabs[,4:8]
library(class)
knn_pred <- knn(train = morph,
cl = crabs$sp,
test = morph,
k = 3)
knn_pred
morph <- crabs[,4:8]
library(class)
knn_pred <- knn(train = morph,
cl = crabs$sp,
test = morph,
k = 3)
knn_pred
# Confusion matrix:
confT <- table(knn_pred, crabs$sp)
confT
row(confT)
confT
# Training error:
diag(confT) <- 0
confT
missCount <- sum(confT)
missCount
trainErr <- missCount/nrow(crabs)
trainErr
# Confusion matrix:
confT <- table(knn_pred, crabs$sp)
confT
# Training error:
missT <- confT
diag(missT) <- 0
trainErr <- sum(missT)/sum(confT)
trainErr
# Confusion matrix:
confT <- table(knn_pred, crabs$sp)
confT
# Training error:
missT <- confT
diag(missT) <- 0
trainErr <- sum(missT)/sum(confT)
trainErr
fet <- read.csv('Cardiotocography_fin.csv', stringsAsFactors = TRUE)
getwd()
setwd("/home/yrothacher/Desktop/PostDoc_Unterlagen/Arbeit/Workshops/myWorkshops/Blockkurs_IntroToMachineLearning_FS23/Exercises/IMLR_Part03_KNN/")
fet <- read.csv('Cardiotocography_fin.csv', stringsAsFactors = TRUE)
str(fet)
table(fet$NSP)
nicePairsPlot(fet)
niceUnivPlot(fet)
niceUnivPlot(fet$FM)
table(fet$FM)
nicePairsPlot(fet)
nicePairsPlot(fet, catVar = fet$NSP)
nicePairsPlot(fet, catVar = fet$NSP, loess = TRUE)
niceUnivPlot(fet$DP, catVar = fet$NSP)
nicePairsPlot(fet, catVar = fet$NSP, loess = TRUE)
nicePairsPlot(fet, catVar = fet$NSP, loess = TRUE, txtInc = 0.8)
nice3DPlot(fet[,c("DP", "AC", "Variance")], catVar = fet$NSP)
nice3DPlot(fet[,c("DP", "AC", "Variance")], catVar = fet$NSP, spheres = TRUE)
nice3DPlot(fet[,c("DP", "AC", "Variance")], catVar = fet$NSP)
table(fet$NSP)
ls()
fet <- read.csv('Cardiotocography_fin.csv', stringsAsFactors = TRUE)
str(fet)
table(fet$NSP)
getwd()
fet <- read.csv('Cardiotocography_fin.csv', stringsAsFactors = TRUE)
fet <- read.csv('Cardiotocography.csv', stringsAsFactors = TRUE)
str(fet)
table(fet$NSP)
library(CustomFunctionsYrotha)
setUpGraph()
nicePairsPlot(fet)
nicePairsPlot(fet, catVar = fet$NSP)
?sample
sample(1:10, size = 4)
ks <- 1:30
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
show_sol <- TRUE
# Chunk 2
#install.packages("MASS")
library(MASS)
head(crabs)
# Chunk 3
dim(crabs)
str(crabs)
summary(crabs)
# Chunk 4
morph <- crabs[,4:8]
library(class)
knn_pred <- knn(train = morph,
cl = crabs$sp,
test = morph,
k = 3)
knn_pred
# Chunk 5: 1d
# Confusion matrix:
confT <- table(knn_pred, crabs$sp)
confT
# Training error:
missT <- confT
diag(missT) <- 0
trainErr <- sum(missT)/sum(confT)
trainErr
# Chunk 6
fet <- read.csv('Cardiotocography.csv', stringsAsFactors = TRUE)
str(fet)
table(fet$NSP)
# Chunk 7
sample(1:10, size = 4)
# Chunk 8
set.seed(1121)
s <- 200
test_ind <- sample(1:nrow(fet), size = s)
fet_test <- fet[test_ind,]
fet_train <- fet[-test_ind,]
# Apply KNN:
# For training error:
knn_pred_tr <- knn(train = fet_train[,-1], # We have to remove the target variable (column 1)
test = fet_train[,-1],
cl = fet_train$NSP,
k = 4)
# For test error:
knn_pred_te <- knn(train = fet_train[,-1],
test = fet_test[,-1],
cl = fet_train$NSP,
k = 4)
# Confusion matrix (training data):
confT <- table(knn_pred_tr, fet_train$NSP)
confT
# Training error:
missT <- confT
diag(missT) <- 0
trainErr <- sum(missT)/sum(confT)
trainErr
# Confusion matrix (test data):
confT_te <- table(knn_pred_te, fet_test$NSP)
confT_te
# Test error:
missT <- confT_te
diag(missT) <- 0
testErr <- sum(missT)/sum(confT_te)
testErr
ks <- 1:30
train_err <- NA
test_err <- NA
fet_tr_sc <- fet_train[,-1]
fet_te_sc <- fet_test[,-1]
fet_tr_sc
set.seed(262)
i <- 1
# Test error
knn_pred_te <- knn(train = fet_tr_sc,
test = fet_te_sc,
cl = fet_train$NSP,
k = ks[i])
knn_pred_te
# Test error
knn_pred_te <- knn(train = fet_tr_sc,
cl = fet_train$NSP,
test = fet_te_sc,
k = ks[i])
knn_pred_te
confT_te <- table(knn_pred_te, fet_test$NSP)
diag(1)
diag(5)
confT_te
confT_te[diag(3)]
missCount_te <- sum(confT_te[diag(nrow(confT_te))])
missCount_te
confT_te[]
confT_te[diag(3)]
diag(3)
# Test error
knn_pred_te <- knn(train = fet_tr_sc,
cl = fet_train$NSP,
test = fet_te_sc,
k = ks[i])
confT_te <- table(knn_pred_te, fet_test$NSP)
missT <- confT_te
diag(missT) <- 0
test_err[i] <- sum(missT)/sum(confT_te)
test_err
missT
confT_te
sum(confT_te)
sum(missT)
test_err
confT_tr <- table(knn_pred_tr, fet_train$NSP)
missT <- confT_tr
diag(missT) <- 0
missT
train_err[i] <- sum(missT)/sum(confT_tr)
train_err
# Put everything together:
knn.res <- data.frame(k=ks, train_err, test_err)
knn.res
plot(knn_res$k, knn_res$test_err, type = 'l',
ylim = c(0, 0.28), col='red', xlab='k', ylab='error rate')
